name: CI/CD Pipeline

on:
  push:
    branches: [ main, 10-https-zu-http-ändern ]
  pull_request:
    branches: [ main ]

jobs:
  # ================= 1) BUILD & PUSH DOCKER IMAGE TO DOCKER HUB =================
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        working-directory: Code
        run: npm ci

      - name: Build Next.js application
        working-directory: Code
        run: npm run build

      - name: Log in to Docker Hub
        working-directory: Code
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Debug DockerHub Username
        run: echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}"

      - name: Build Docker image
        working-directory: Code
        run: |
          docker build \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/my-nextjs-app:${{ github.sha }} \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/my-nextjs-app:latest \
            .

      - name: Push Docker image
        working-directory: Code
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-nextjs-app:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-nextjs-app:latest

  # ================= 2) TERRAFORM INFRASTRUCTURE =================
  terraform_infra:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.10.5'

      - name: Terraform Init
        working-directory: infra
        run: terraform init

      - name: Terraform Plan
        working-directory: infra
        run: terraform plan -out=plan.tfplan

      - name: Terraform Apply
        working-directory: infra
        run: terraform apply -auto-approve

      - name: Terraform Output (JSON)
        id: tf_output
        working-directory: infra
        run: terraform output -json > tf_outputs.json

      - name: Upload TF outputs
        uses: actions/upload-artifact@v4
        with:
          name: tf_outputs
          path: infra/tf_outputs.json

  # ================= 3) ANSIBLE CONFIGURATION =================
  ansible_config:
    runs-on: ubuntu-latest
    needs: [terraform_infra]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List current directory contents
        run: ls -la

      - name: Download TF outputs
        uses: actions/download-artifact@v4
        with:
          name: tf_outputs
          path: ./

      - name: Set ENV_FILE from secret
        shell: bash
        run: |
          echo "ENV_FILE<<EOF" >> $GITHUB_ENV
          echo "${{ secrets.MY_DOTENV_CONTENTS }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Extract instance public IP
        run: |
          PUBLIC_IP=$(jq -r '.public_ip.value' tf_outputs.json)
          echo "PUBLIC_IP=${PUBLIC_IP}"
          echo "PUBLIC_IP=${PUBLIC_IP}" >> $GITHUB_ENV
        shell: bash

      - name: Debug PUBLIC_IP
        run: echo "PUBLIC_IP=${{ env.PUBLIC_IP }}"

      - name: Show tf_outputs.json (debug)
        run: cat tf_outputs.json

      - name: Parse and create inventory
        id: create_inventory
        shell: bash
        run: |
          echo "[ec2]" > inventory.ini
          echo "${{ env.PUBLIC_IP }} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini
          echo "" >> inventory.ini
          echo "[ec2:vars]" >> inventory.ini
          echo "ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory.ini
          cat inventory.ini

      - name: Install Ansible and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible jq

      - name: Prepare SSH Key
        shell: bash
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.MY_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Echo PUBLIC_IP before Ansible
        run: |
            echo "PUBLIC_IP is: ${{ env.PUBLIC_IP }}"

      - name: Run Ansible Playbook
        shell: bash
        continue-on-error: true
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          ENV_FILE: ${{ env.ENV_FILE }}
          # Используем PUBLIC_IP для формирования базового URL с протоколом http
          LB_DNS: "http://${{ env.PUBLIC_IP }}"
        run: |
          ansible-playbook -i inventory.ini ansible/playbook.yml
