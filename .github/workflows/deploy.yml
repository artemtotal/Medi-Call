name: CI/CD Pipeline

on:
  push:
    branches: [ main, 15-avatars-clean ]
  pull_request:
    branches: [ main ]


jobs:
  # ================= 1) BUILD & PUSH DOCKER IMAGE TO DOCKER HUB =================
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        working-directory: Code
        run: npm ci

      - name: Build Next.js application
        working-directory: Code
        run: npm run build

      #  Docker image build and push
      - name: Log in to Docker Hub
        working-directory: Code
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # do you know docker username? 
      - name: Debug DockerHub Username
        run: echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}"

      - name: Build Docker image
        working-directory: Code
        run: |
          docker build \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/my-nextjs-app:${{ github.sha }} \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/my-nextjs-app:latest \
            .
      
      - name: Push Docker image
        working-directory: Code
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-nextjs-app:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-nextjs-app:latest

  # ================= 2) TERRAFORM INFRASTRUCTURE =================
  terraform_infra:
    runs-on: ubuntu-latest
    needs: [build]  # First we wait for the image to assemble

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.10.5'

      - name: Terraform Init
        working-directory: infra
        run: terraform init

      - name: Terraform Plan
        working-directory: infra
        run: terraform plan -var "acm_certificate_arn=arn:aws:acm:eu-central-1:345594593042:certificate/bc7393f9-5324-49c7-8f5f-74c1a5cfe42a" -out=plan.tfplan


      - name: Terraform Apply
        working-directory: infra
        run: terraform apply -auto-approve plan.tfplan
      

      - name: Terraform Output (JSON)
        id: tf_output
        working-directory: infra
        run: terraform output -json > tf_outputs.json

      - name: Upload TF outputs
    # Save tf_outputs.json as an artifact,
        # to use in the next job (ansible_config).
        uses: actions/upload-artifact@v4
        with:
          name: tf_outputs
          path: infra/tf_outputs.json


  # ================= 3) ANSIBLE CONFIGURATION =================
  ansible_config:
    runs-on: ubuntu-latest
    needs: [terraform_infra]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      
      - name: List current directory contents
        run: ls -la

      - name: Download TF outputs
        uses: actions/download-artifact@v4
        with:
          name: tf_outputs
          path: ./  # Download to the root of the workspace

        

      - name: Set ENV_FILE from secret
        shell: bash
        run: |
          echo "ENV_FILE<<EOF" >> $GITHUB_ENV
          echo "${{ secrets.MY_DOTENV_CONTENTS }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        
        

      - name: Extract Load Balancer DNS
        run: |
          LB_DNS=$(jq -r '.load_balancer_dns_name.value' tf_outputs.json)
          echo "LB_DNS=${LB_DNS}"
          echo "LB_DNS=${LB_DNS}" >> $GITHUB_ENV
        shell: bash

      - name: Debug LB_DNS
        run: echo "LB_DNS=${{ env.LB_DNS }}"


          
      - name: Show tf_outputs.json (debug)
        run: cat tf_outputs.json

      - name: Parse and create inventory
        id: create_inventory
        shell: bash
        run: |
          # Assume we have output “public_ips” (array of IPs) in Terraform
          # Example:
          # output “public_ips” {
          # value = data.aws_instances.asg_instances.public_ips
          # }
          # Or manually output the IPs in “public_ips”
          # 
          # Extract the IP list into a bash array
          
          PUBLIC_IPS=$(jq -r '.public_ips.value[]' tf_outputs.json)
          echo "Found IPs:"
          echo "$PUBLIC_IPS"
          
          # Let's generate the inventory.ini file
          echo "[ec2]" > inventory.ini
          for IP in $PUBLIC_IPS; do
            echo "${IP} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini
          done

          echo "" >> inventory.ini
          echo "[ec2:vars]" >> inventory.ini
          echo "ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory.ini
          
          echo "==============================="
          cat inventory.ini

      - name: Install Ansible and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible jq

      - name: Prepare SSH Key
        shell: bash
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.MY_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      
      - name: Echo LB_DNS before Ansible
        run: |
          echo "LB_DNS is: ${{ env.LB_DNS }}"
        
          
      # - name: Create variables file
      #   run: |
      #     echo "dockerhub_username: '${{ secrets.DOCKERHUB_USERNAME }}'" > variables.yml
      #     echo "dockerhub_password: '${{ secrets.DOCKERHUB_PASSWORD }}'" >> variables.yml
      #     echo "lb_dns: '${{ env.LB_DNS }}'" >> variables.yml
      
      #     # Добавляем все переменные среды
      #     echo "env_variables:" >> variables.yml
      #     echo "  NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: '${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}'" >> variables.yml
      #     echo "  CLERK_SECRET_KEY: '${{ secrets.CLERK_SECRET_KEY }}'" >> variables.yml
      #     echo "  NEXT_PUBLIC_CLERK_SIGN_IN_URL: '${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL }}'" >> variables.yml
      #     echo "  NEXT_PUBLIC_CLERK_SIGN_UP_URL: '${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL }}'" >> variables.yml
      #     echo "  NEXT_PUBLIC_STREAM_API_KEY: '${{ secrets.NEXT_PUBLIC_STREAM_API_KEY }}'" >> variables.yml
      #     echo "  STREAM_SECRET_KEY: '${{ secrets.STREAM_SECRET_KEY }}'" >> variables.yml
      #   shell: bash
        

      - name: Run Ansible Playbook
        shell: bash
        continue-on-error: true
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          ENV_FILE: ${{ env.ENV_FILE }}
          LB_DNS: ${{ env.LB_DNS }}
        run: |
          ansible-playbook -i inventory.ini ansible/playbook.yml
      

