- name: Configure EC2 instances
  hosts: ec2
  ignore_unreachable: true
  become: true
  vars:
    dockerhub_username: "{{ lookup('env', 'DOCKERHUB_USERNAME') }}"
    dockerhub_password: "{{ lookup('env', 'DOCKERHUB_PASSWORD') }}"
    docker_image: "{{ dockerhub_username }}/my-nextjs-app:latest"
    env_file_content: "{{ lookup('env', 'ENV_FILE') }}"
    lb_dns: "{{ lookup('env', 'LB_DNS') }}"
  tasks:
    - name: Debug variables
      debug:
        msg:
          - "dockerhub_username: {{ dockerhub_username }}"
          - "docker_image: {{ docker_image }}"
          - "lb_dns: {{ lb_dns }}"
          # - "env_variables: {{ env_variables }}"


    # - name: Debug lb_dns variable
    #   debug:
    #     msg: "lb_dns: {{ lb_dns }}"



    - name: Install required packages (Amazon Linux)
      yum:
        name:
          - docker
          - python3
          - python3-pip
        state: present
      when: ansible_os_family is defined and ansible_os_family == "RedHat"

    - name: Start and enable Docker service
      service:
        name: docker
        state: started
        enabled: true
      when: ansible_os_family is defined

    # If the image is private on Docker Hub, log in:
    # - name: Login to Docker Hub
    #   command: >
    #     docker login -u "{{ dockerhub_username }}"
    #     -p "{{ dockerhub_password }}"
    #   no_log: true
    #   vars:
    #     dockerhub_username: "{{ lookup('env','DOCKERHUB_USERNAME') }}"
    #     dockerhub_password: "{{ lookup('env','DOCKERHUB_PASSWORD') }}"

    - name: Login to Docker Hub
      docker_login:
        registry_url: https://index.docker.io/v1/
        username: "{{ dockerhub_username }}"
        password: "{{ dockerhub_password }}"
      #  no_log: true
      # vars:
      #   dockerhub_username: "{{ lookup('env','DOCKERHUB_USERNAME') }}"
      #   dockerhub_password: "{{ lookup('env','DOCKERHUB_PASSWORD') }}"
      when: ansible_os_family is defined

    - name: Pull Docker image
      docker_image:
        name: "{{ docker_image }}"
        source: pull
      when: ansible_os_family is defined

    - name: Create .env file
      copy:
        content: "{{ env_file_content }}"
        dest: "/home/ec2-user/.env"
        owner: ec2-user
        group: ec2-user
        mode: '0600'
        # content: |
        #   {% for key, value in env_variables.items() %}
        #   {{ key }}={{ value }}
        #   {% endfor %}
        #   NEXT_PUBLIC_BASE_URL={{ lb_dns }}
      when: ansible_os_family is defined

    - name: Append NEXT_PUBLIC_BASE_URL to .env file
      lineinfile:
        path: "/home/ec2-user/.env"

        

        # line: "NEXT_PUBLIC_BASE_URL={{ lb_dns }}" 
        #line: "NEXT_PUBLIC_BASE_URL=https://medicall.cfd"

        line: "NEXT_PUBLIC_BASE_URL=https://macht.top"
        # https 
        create: yes
      when: ansible_os_family is defined

    - name: Remove existing Docker container if present
      docker_container:
        name: my_nextjs_app
        state: absent
      when: ansible_os_family is defined

    - name: Run Docker container
      docker_container:
        name: my_nextjs_app
        image: "{{ docker_image }}"
        env_file: "/home/ec2-user/.env"
        published_ports:
          - "80:3000"  # Пробрасываем порт 80 на 3000
        restart_policy: always
        state: started
      when: ansible_os_family is defined
