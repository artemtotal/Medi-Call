---
- name: Configure EC2 instances
  hosts: ec2
  ignore_unreachable: true
  become: true
  vars:
    dockerhub_username: "{{ lookup('env', 'DOCKERHUB_USERNAME') }}"
    dockerhub_password: "{{ lookup('env', 'DOCKERHUB_PASSWORD') }}"
    docker_image: "{{ dockerhub_username }}/my-nextjs-app:latest"
  tasks:
    - name: Debug variables
      debug:
        msg:
          - "dockerhub_username: {{ dockerhub_username }}"
          - "docker_image: {{ docker_image }}"

    - name: Update package manager (Amazon Linux)
      yum:
        name: "*"
        state: latest
      when: ansible_os_family == "RedHat"

    - name: Install Docker (Amazon Linux)
      yum:
        name: docker
        state: present
      when: ansible_os_family == "RedHat"

    - name: Start and enable Docker service
      service:
        name: docker
        state: started
        enabled: true

    # If the image is private on Docker Hub, log in:
    # - name: Login to Docker Hub
    #   command: >
    #     docker login -u "{{ dockerhub_username }}"
    #     -p "{{ dockerhub_password }}"
    #   no_log: true
    #   vars:
    #     dockerhub_username: "{{ lookup('env','DOCKERHUB_USERNAME') }}"
    #     dockerhub_password: "{{ lookup('env','DOCKERHUB_PASSWORD') }}"

    - name: Login to Docker Hub
      docker_login:
        registry_url: https://index.docker.io/v1/
        username: "{{ dockerhub_username }}"
        password: "{{ dockerhub_password }}"
      #  no_log: true
      vars:
        dockerhub_username: "{{ lookup('env','DOCKERHUB_USERNAME') }}"
        dockerhub_password: "{{ lookup('env','DOCKERHUB_PASSWORD') }}"


    - name: Pull Docker image
      command: >
        docker pull {{ docker_image }}
      vars:
        # You can pass the full tag from the GH Actions env
        # Or hardcode “username/my-nextjs-app:latest”
        docker_image: "{{ lookup('env','DOCKERHUB_USERNAME') }}/my-nextjs-app:latest"
    - name: Create .env file
      copy:
        content: "{{ lookup('env','ENV_FILE') }}"
        dest: "/home/ec2-user/.env"
        owner: ec2-user
        group: ec2-user
        mode: '0600'

    - name: Run Docker container
      command: >
        docker run -d
        --name my_nextjs_app
        --env-file /home/ec2-user/.env  
        -p 3000:3000
        --restart always
        {{ docker_image }}
      vars:
        docker_image: "{{ lookup('env','DOCKERHUB_USERNAME') }}/my-nextjs-app:latest"
